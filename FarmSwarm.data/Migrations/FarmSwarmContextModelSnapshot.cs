// <auto-generated />
using System;
using FarmSwarm.data.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FarmSwarm.data.Migrations
{
    [DbContext(typeof(FarmSwarmContext))]
    partial class FarmSwarmContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FarmSwarm.data.Entities.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<int>("LightIntensity")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("FarmSwarm.data.Entities.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("FarmSwarm.data.Entities.GreenHouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GreenHouses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 7, 30, 17, 53, 4, 213, DateTimeKind.Local).AddTicks(510)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 7, 30, 17, 53, 4, 213, DateTimeKind.Local).AddTicks(1200)
                        });
                });

            modelBuilder.Entity("FarmSwarm.data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentConditionId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentGreenHouseId")
                        .HasColumnType("int");

                    b.Property<int?>("DeckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentConditionId");

                    b.HasIndex("CurrentGreenHouseId");

                    b.HasIndex("DeckId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FarmSwarm.data.Entities.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GreenHouseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GreenHouseId");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 7, 30, 17, 53, 4, 214, DateTimeKind.Local).AddTicks(7041),
                            GreenHouseId = 1,
                            Name = "basil"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 7, 30, 17, 53, 4, 214, DateTimeKind.Local).AddTicks(8086),
                            GreenHouseId = 1,
                            Name = "tomato"
                        });
                });

            modelBuilder.Entity("FarmSwarm.data.Entities.Condition", b =>
                {
                    b.HasOne("FarmSwarm.data.Entities.Location", null)
                        .WithMany("ConditionHistory")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("FarmSwarm.data.Entities.Location", b =>
                {
                    b.HasOne("FarmSwarm.data.Entities.Condition", "CurrentCondition")
                        .WithMany()
                        .HasForeignKey("CurrentConditionId");

                    b.HasOne("FarmSwarm.data.Entities.GreenHouse", "CurrentGreenHouse")
                        .WithMany("LocationHistory")
                        .HasForeignKey("CurrentGreenHouseId");

                    b.HasOne("FarmSwarm.data.Entities.Deck", null)
                        .WithMany("Locations")
                        .HasForeignKey("DeckId");

                    b.Navigation("CurrentCondition");

                    b.Navigation("CurrentGreenHouse");
                });

            modelBuilder.Entity("FarmSwarm.data.Entities.Plant", b =>
                {
                    b.HasOne("FarmSwarm.data.Entities.GreenHouse", "GreenHouse")
                        .WithMany("Plants")
                        .HasForeignKey("GreenHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GreenHouse");
                });

            modelBuilder.Entity("FarmSwarm.data.Entities.Deck", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("FarmSwarm.data.Entities.GreenHouse", b =>
                {
                    b.Navigation("LocationHistory");

                    b.Navigation("Plants");
                });

            modelBuilder.Entity("FarmSwarm.data.Entities.Location", b =>
                {
                    b.Navigation("ConditionHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
